-- automatically generated by BNF Converter
{-# LANGUAGE FlexibleContexts #-}

module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )

import Lexgram
import Pargram
import Skelgram
import Printgram
import Absgram
import Evalgram



import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int


-- preprocessLine :: (String, Integer) -> Integer -> (String, Integer)
-- preprocessLine (s, prevIndent) currIndent | currIndent == prevIndent = (s, prevIndent)
-- 														| currIndent == prevIndent + 1 = ("INDENT " ++ s. currIndent)
-- 														| currIndent < prevIndent = ()
-- 
-- 
-- removeIndent :: String -> String
-- removeIndent [] = []
-- removeIndent (x:xs) | x == '\t' = removeIndent xs
-- 						  | otherwise = x:xs
-- 
-- countIndent :: String -> Integer
-- countIndent [] = 0
-- countIndent (x:xs) | x == '\t' = (countIndent xs) + 1
-- 						 | otherwise = 0

putStrV :: Verbosity -> String -> IO ()
putStrV v s = if v > 1 then putStrLn s else return ()

runFile :: (Print Program, Show Program) => Verbosity -> ParseFun Program -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p

run :: (Print Program, Show Program) => Verbosity -> ParseFun Program -> String -> IO ()
run v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
           Ok  tree -> do putStrLn "\nParse Successful!"
                          if checkProgram tree then
                            putStrLn $ "\n[End State]\n\n" ++ (show $ evalProgram tree)
                          else
                            putStrLn "\n Type check failed\n"
                          showTree v tree



showTree :: (Show Program, Print Program) => Int -> Program -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

main :: IO ()
main = do args <- getArgs
          case args of
            [] -> hGetContents stdin >>= run 2 pProgram
            "-s":fs -> mapM_ (runFile 0 pProgram) fs
            fs -> mapM_ (runFile 2 pProgram) fs





