module Skelgram where

-- Haskell module generated by the BNF converter

import Absgram
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transRecName :: RecName -> Result
transRecName x = case x of
  RecName str  -> failure x


transLIdent :: LIdent -> Result
transLIdent x = case x of
  LIdent str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Prog decls  -> failure x


transDecl :: Decl -> Result
transDecl x = case x of
  Dfun type' lident pdecls stmtb  -> failure x
  Dproc lident pdecls stmtb  -> failure x
  Drec recname vdecls  -> failure x
  Dstmt stmtline  -> failure x


transStmtLine :: StmtLine -> Result
transStmtLine x = case x of
  Sline stmtl  -> failure x


transStmtB :: StmtB -> Result
transStmtB x = case x of
  Sblock stmtls  -> failure x


transStmtL :: StmtL -> Result
transStmtL x = case x of
  Slst stmts  -> failure x


transStmt :: Stmt -> Result
transStmt x = case x of
  Sif exp stmtb  -> failure x
  Sife exp stmtb1 stmtb2  -> failure x
  Swh exp stmtb  -> failure x
  Sfor lident exp stmtb  -> failure x
  Sret exp  -> failure x
  Sfcll exp  -> failure x
  Sass lident exp  -> failure x
  Sdecl sdecl  -> failure x
  Sprt exp  -> failure x


transSDecl :: SDecl -> Result
transSDecl x = case x of
  Svar vdecl  -> failure x
  Svas vdecl exp  -> failure x


transVDecl :: VDecl -> Result
transVDecl x = case x of
  VDcl type' lident  -> failure x


transPDecl :: PDecl -> Result
transPDecl x = case x of
  PDcl vdecl  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EdarR exp1 exp2  -> failure x
  Edarr exps  -> failure x
  Eor exp1 exp2  -> failure x
  Eand exp1 exp2  -> failure x
  Eeq exp1 exp2  -> failure x
  Edif exp1 exp2  -> failure x
  Egt exp1 exp2  -> failure x
  Egte exp1 exp2  -> failure x
  Elt exp1 exp2  -> failure x
  Elte exp1 exp2  -> failure x
  Eadd exp1 exp2  -> failure x
  Esub exp1 exp2  -> failure x
  Emul exp1 exp2  -> failure x
  Ediv exp1 exp2  -> failure x
  Eneg exp  -> failure x
  Emin exp  -> failure x
  Earr exp1 exp2  -> failure x
  Efn lident  -> failure x
  Efnp lident exps  -> failure x
  Erec recname exps  -> failure x
  Evar lidents  -> failure x
  Econ constant  -> failure x


transConstant :: Constant -> Result
transConstant x = case x of
  Efalse  -> failure x
  Etrue  -> failure x
  Eint n  -> failure x


transType :: Type -> Result
transType x = case x of
  Tint  -> failure x
  Tbool  -> failure x
  Trec recname  -> failure x
  Tarr type'  -> failure x
  Tref type'  -> failure x



